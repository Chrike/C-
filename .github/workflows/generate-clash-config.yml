name: Generate Clash Config and Push to Gist

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  generate_and_push_gist:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # cache: 'npm' # Remove if no package-lock.json

      - name: Install dependencies
        run: npm install js-yaml # Or 'npm install'

      - name: Create temporary directory for proxies
        run: mkdir -p temp_data

      - name: Fetch latest proxy list
        id: fetch_proxies
        run: |
          echo "Fetching proxy list..."
          curl -f -L -S -s -o temp_data/proxies.yaml 'https://gist.githubusercontent.com/Chrike/9a70063363aca87a35fbad9ffb9fdcfd/raw/all.yaml'
          echo "Proxy list download command finished."
          if [ ! -s temp_data/proxies.yaml ]; then
            echo "Warning: Downloaded proxy list is empty or download failed. Proceeding..."
          else
            echo "Proxy list downloaded successfully."
          fi

      - name: Generate Clash configuration
        id: generate_config
        run: |
          echo "Running Node.js script to generate config..."
          node generate-clash-config.js temp_data/proxies.yaml clash_config.yaml
          echo "Node.js script finished."
          if [ ! -f clash_config.yaml ]; then
             echo "Error: clash_config.yaml was not created by the script."
             exit 1
          fi
          echo "clash_config.yaml generated."

      - name: Check generated file existence and content
        run: |
          ls -l clash_config.yaml # Print file info
          if [ ! -s clash_config.yaml ]; then # -s checks file exists and is not empty
            echo "Error: clash_config.yaml is missing or empty!"
            exit 1
          fi
          echo "clash_config.yaml exists and is not empty."
          echo "--- Start of clash_config.yaml head ---"
          head -n 10 clash_config.yaml # Print first 10 lines
          echo "--- End of clash_config.yaml head ---"

      # --- 新增：列出 Gist 文件用于调试 ---
      - name: List files in Gist (Debug)
        env:
          GITHUB_TOKEN: ${{ secrets.GIST_PAT }}
          GIST_ID: ${{ secrets.GIST_ID }}
        run: |
          if [ -z "$GITHUB_TOKEN" ]; then echo "GIST_PAT is not set"; exit 1; fi
          if [ -z "$GIST_ID" ]; then echo "GIST_ID is not set"; exit 1; fi
          echo "Attempting to view Gist ID: $GIST_ID to check access and files..."
          # The --files flag lists only the filenames
          gh gist view "$GIST_ID" --files || echo "Failed to list files. Check GIST_ID and GIST_PAT permissions."

      # --- 修改：为 gh gist edit 添加调试输出 ---
      - name: Update Gist with generated config
        env:
          GITHUB_TOKEN: ${{ secrets.GIST_PAT }}
          GIST_ID: ${{ secrets.GIST_ID }}
          GIST_FILENAME: ${{ secrets.GIST_FILENAME || 'clash_config.yaml' }}
          # Enable maximum debug output for gh cli http requests
          # Alternatives: DEBUG=api or DEBUG=http
          DEBUG: '*'
        run: |
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "Error: GIST_PAT secret is not set."
            exit 1
          fi
          if [ -z "$GIST_ID" ]; then
            echo "Error: GIST_ID secret is not set."
            exit 1
          fi
          echo "Updating Gist $GIST_ID with file $GIST_FILENAME..."
          # Execute the command with debug logging enabled via DEBUG env var
          gh gist edit "$GIST_ID" --filename "$GIST_FILENAME" < clash_config.yaml
          # Check exit code immediately after
          gh_exit_code=$?
          if [ $gh_exit_code -ne 0 ]; then
            echo "Error: gh gist edit command failed with exit code $gh_exit_code"
            exit $gh_exit_code
          fi
          echo "Gist update command finished successfully."

      - name: Clean up temporary files
        if: always()
        run: |
          echo "Cleaning up temporary directory..."
          rm -rf temp_data
          # rm -f clash_config.yaml # Keep the generated file for potential artifact upload if needed
          echo "Cleanup finished."
