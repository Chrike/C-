name: Generate Clash Config and Update Gist

on:
  schedule:
    - cron: '0 0 * * *' # 每天 UTC 时间 0 点运行
  workflow_dispatch: # 允许手动触发

jobs:
  generate_and_update: # 合并 Job 名称
    runs-on: ubuntu-latest
    permissions:
      contents: write # 仍然需要写入权限来提交到仓库 (如果保留该步骤)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
           persist-credentials: true # 如果保留仓库提交步骤则需要

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # 移除缓存，因为我们没有 lock 文件，避免报错
          # cache: 'npm'

      - name: Install dependencies
        run: npm install js-yaml

      - name: Create temporary directory for proxies
        run: mkdir -p temp_data

      - name: Fetch latest proxy list
        id: fetch_proxies
        run: |
          echo "Fetching proxy list..."
          curl -f -L -S -s -o temp_data/proxies.yaml 'https://gist.githubusercontent.com/Chrike/9a70063363aca87a35fbad9ffb9fdcfd/raw/all.yaml'
          if [ ! -s temp_data/proxies.yaml ]; then
            echo "Warning: Downloaded proxy list is empty or download failed. Proceeding..." >&2 # 输出到 stderr
          else
            echo "Proxy list downloaded successfully."
          fi

      - name: Generate Clash configuration
        id: generate_config
        run: |
          echo "Running Node.js script to generate config..."
          # 运行脚本，输入是下载的代理文件，输出是 clash_config.yaml
          node generate-clash-config.js temp_data/proxies.yaml clash_config.yaml
          if [ ! -f clash_config.yaml ]; then
             echo "Error: clash_config.yaml was not created by the script." >&2
             exit 1
          fi
          echo "clash_config.yaml generated."

      # --- 可选步骤：提交到仓库 ---
      # 如果你仍然想把文件提交回你的 GitHub 仓库，保留这个步骤
      - name: Commit and push changes to repository
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update Clash configuration in repo [skip ci]"
          file_pattern: clash_config.yaml
          commit_user_name: GitHub Actions Bot
          commit_user_email: actions@github.com
          commit_author: GitHub Actions Bot <actions@github.com>

      # --- 新增步骤：更新 Gist ---
      - name: Update Gist with generated config
        uses: exuanbo/actions-sync-gist@v1 # 使用更新 Gist 的 Action
        if: success() && steps.generate_config.outcome == 'success' # 确保文件生成成功才执行
        with:
          token: ${{ secrets.GIST_PAT }}       # 使用你创建的 PAT Secret
          gist_id: ${{ secrets.GIST_ID }}      # 使用你存储的 Gist ID Secret
          file_path: 'clash_config.yaml'     # 本地生成的文件路径
          file_name: 'clash_config.yaml'     # Gist 中要更新的文件名 (必须与 Gist 中已有的文件名匹配)

      - name: Clean up temporary files
        if: always() # 无论成功与否都清理
        run: |
          echo "Cleaning up temporary directory..."
          rm -rf temp_data
          echo "Cleanup finished."
